(function () { "use strict"; let e = {}, t = {}, n = {}, l = {}, i = {}, s = 0, o = { "*": !0, "#": !1 }; function r(e) { for (var t = [], n = e.length; n--; t[n] = e[n]); return t } const c = e => ("number" == typeof e || "string" == typeof e && "" !== e.trim()) && !isNaN(e), a = e => "string" == typeof e && ("true" === (e = e.toLowerCase()) || "false" === e); function f(e, t) { if ("string" == typeof e && (e = e.split(".")), void 0 === t) return e; let n = 0; for (let l = 0; l < e.length; l++) { let i = e[l]; if ("string" == typeof i && "$" === i.charAt(0)) { let s; if (Array.isArray(t) ? (s = t[n], n++) : s = t[i], void 0 === s && void 0 !== t.el && (s = t.el.dataflow.context[i]), void 0 === s) return; e[l] = s } } return e } function u(e) { for (let t = 0; t < e.length; t++) { let n = e[t]; if (void 0 === n.args && void 0 !== n.path) n.fn(v.get(n.path, n)); else { let e = v.prepare(n); void 0 !== n.fn && n.fn.apply(n, e) } } } function d(e) { for (let t in e) { let n = e[t]; u(n.watchers), d(n.keys) } } function h(e, t, n, l, i, s) { let r = "", c = null, a = !1, f = null, u = null, d = !1; for (; n < t.length; n++) { let v = t[n]; switch (!0) { case " " === v && !a: case "\\" === v && a: continue; case "'" === v && "\\" != t[n - 1]: a = !a, r += "'"; continue; case "[" === v && !a: r = [], n = h(r, t, n + 1, l, i, s); continue; case ("," === v || ";" === v || "]" === v || "}" === v || ")" === v) && !a: if (null !== f && (f.pos = null === c ? e.length : c, f.path.push(r), l.push(f), r = void 0), null === f && d && (s.push({ obj: e, name: r, pos: c || e.length }), d = !1), p(e, r, c), f = null, r = "", c = null, "," === v || ";" === v) continue; return n; case "{" === v && !a: r = {}, n = h(r, t, n + 1, l, i, s); continue; case ":" === v && !a: p(e, r, c), c = r, r = "", d = !1; continue; case ("*" === v || "#" === v) && !a: f = { obj: e, watch: o[v], flow: "l", path: [] }; continue; case "&" === v && !a: f = { obj: e, watch: !1, flow: "p", path: [] }; continue; case "." === v && !a && null !== f: if ("" === r) { f.flow = "g"; continue } f.path.push(r), r = ""; continue; case "@" === v && !a && null === u: u = {}; continue; case "(" === v && !a && null !== u: u.obj = e, u.name = r, u.pos = e.length, r = [], n = h(r, t, n + 1, l, i, s), u.args = r, i.push(u), u = null, r = void 0; continue; case "$" === v && !a: r += v, null === f && (d = !0); continue; default: r += v } } return null !== f && (f.pos = null === c ? e.length : c, f.path.push(r), l.push(f), r = void 0), null === f && d && (s.push({ obj: e, name: r, pos: c || e.length }), d = !1), p(e, r, c), f = null, r = "", c = null, n } function p(e, t, n) { let l = function (e) { if (void 0 === e) return e; switch (!0) { case "'" === e[0] && "'" === e[e.length - 1]: return e.slice(1, -1); case c(e): return parseFloat(e); case a(e): return JSON.parse(e); default: return e } }(t); Array.isArray(e) ? e.push(l) : null === n ? e[l] = void 0 : e[n] = l } let v = { component: function (t, n) { if (void 0 === n) return e[t]; e[t] = n }, directive: function (e, n) { if (void 0 === n) return t[":" + e]; t[":" + e] = n }, func: function (e, t) { if (void 0 === t) return i[e]; i[e] = t }, watcher: function (e, t) { if (void 0 === (e = f(e, t))) return; let n = e.length, i = l; for (let l = 0; l < n; l++) { if (void 0 === e[l]) return; if (void 0 === i[e[l]] && (i[e[l]] = { len: 0, watchers: [], keys: {} }), i[e[l]].len++, l === n - 1) return "function" == typeof t && (t = { fn: t, path: e }), t.watcherId = ++s, i[e[l]].watchers.push(t), void (void 0 !== t.el && (this.setup(t.el), t.el.dataflow.watchers.push({ watcherId: t.watcherId, path: e }))); i = i[e[l]].keys } }, flow: function (e, t) { if (void 0 === t && (t = {}), "none" === t.flow) return; let n = (e = f(e, t)).length, i = l; for (let l = 0; l < n; l++)if (l < n - 1) { if (void 0 === i[e[l]]) return; if ("before" !== t.flow && "all" !== t.flow || u(i[e[l]].watchers), "deep" === t.flow) return void d(i[e[l]].keys); i = i[e[l]].keys } else void 0 !== i[e[l]] && (u(i[e[l]].watchers), "after" !== t.flow && "all" !== t.flow || d(i[e[l]].keys)) }, inject: function (t, n) { void 0 === n && (n = {}); let l = e[t]; void 0 !== n.comp && (t = n.comp); let i = {}; i.comp = t.split("."), i.watcher = function (e, n) { let l = "function" == typeof e; n = n.bind(this), v.watcher(t + (l ? "" : "." + e), n) }, i.set = function (e, n, l) { Array.isArray(e) && (e = e.join(".")), v.set(t + (isFn ? "" : "." + e), n, l) }, i.get = function (e, n) { return Array.isArray(e) && (e = e.join(".")), v.get(t + (isFn ? "" : "." + e), n) }, i.push = function (e, n) { Array.isArray(e) && (e = e.join(".")); let l = v.get(t + (isFn ? "" : "." + e), i); l.push(n), v.set(t + (isFn ? "" : "." + e), l, i) }, i.func = function (e, t) { if (!t) return this.funcs[e]; void 0 === this.funcs && (this.funcs = {}), this.funcs[e] = t }, l.call(i, n), i.compCtx = i, this.set(t, i), void 0 !== n.el ? i.el = n.el : i.el = document.querySelector(n.root || i.root), this.set(t + ".init", !0), i.el.insertAdjacentHTML("beforeend", i.template), i.el = i.el.lastElementChild, this.exec(i), this.set(t + ".ready", !0) }, exec: function (e) { console.log(e), void 0 === e.el && (e.el = document.querySelector(e.root)), this.setup(e.el); let n = []; e.container && n.push(e.el); let l = e.el.querySelectorAll("*"), i = l.length; for (let e = 0; e < i; e++)n.push(l[e]); i = n.length; for (let l = 0; l < i; l++) { let i = n[l]; this.setup(i); let s = i.attributes, o = s.length; for (let n = 0; n < o; n++) { let l = s[n].name, o = s[n].value, r = { el: i, fn: t[l], ctx: e }; switch (this.transfer(e, r), l.charAt(0)) { case "@": r.args = this.parse(o), this.register(r); let t = l.slice(1), n = function () { v.prepare(r) }; i.addEventListener(t, n), r.el.dataflow.events.push({ eventName: t, eventFn: n }); break; case ":": if (console.log(o), r.args = this.parse(o), this.register(r), e.register || i.dataflow.register) continue; r.fn.apply(r, this.prepare(r)) } } } }, set: function (e, t, l) { if ("object" != typeof l) { l = []; for (let e = 2; e < arguments.length; e++)l.push(arguments[e]) } if (void 0 === (e = f(e, l))) return; let i = e.length, s = n; for (let n = 0; n < i; n++)n < i - 1 ? (void 0 === s[e[n]] && (s[e[n]] = {}), s = s[e[n]]) : s[e[n]] = t; this.flow(e, l) }, get: function (e, t) { if (void 0 === (e = f(e, t))) return; if ("object" != typeof t) { t = []; for (let e = 2; e < arguments.length; e++)t.push(arguments[e]) } let l = e.length, i = n; for (let t = 0; t < l; t++) { if (!(t < l - 1)) return i[e[t]]; if (void 0 === i[e[t]]) return; i = i[e[t]] } }, unset: function (e, t) { let l = this; if (void 0 === (e = f(e, t))) return; if ("object" != typeof t) { t = []; for (let e = 2; e < arguments.length; e++)t.push(arguments[e]) } let i = e.length, s = n; for (let n = 0; n < i; n++)if (n < i - 1) { if (void 0 === s[e[n]]) return; s = s[e[n]] } else delete s[e[n]], l.flow(e, t) }, clean: function (e, t) { "string" == typeof e && (e = document.querySelector(e)); let n = []; if (void 0 !== t && t.container && (n = [e]), void 0 !== t && void 0 !== t.deep) { let t = e.querySelectorAll("*"), l = t.length; for (let e = 0; e < l; e++)n.push(t[e]) } let i = !1; void 0 !== t && t.data && (i = !0); for (let t = 0; t < n.length; t++)if (void 0 !== (e = n[t]).dataflow) { if (void 0 !== e.dataflow.events) { for (let t = 0; t < e.dataflow.events.length; t++) { let n = e.dataflow.events[t]; e.removeEventListener(n.eventName, n.eventFn) } e.dataflow.events = [] } if (void 0 !== e.dataflow.watchers) { for (let t = 0; t < e.dataflow.watchers.length; t++) { let n = e.dataflow.watchers[t], s = n.path.length, o = l; for (let e = 0; e < s; e++) { if (1 === o[n.path[e]].len) { delete o[n.path[e]], i && this.unset(n.path.slice(0, e + 1)); break } if (o[n.path[e]].len--, e !== s - 1) o = o[n.path[e]].keys; else for (let t = 0; t < o[n.path[e]].watchers.length; t++) { let l = o[n.path[e]].watchers[t]; n.watcherId === l.watcherId && o[n.path[e]].watchers.splice(t, 1) } } } e.dataflow.watchers = [] } } }, remove: function (e, t) { for ("string" == typeof e && (e = document.querySelector(e)), this.clean(e, t); e.firstChild;)e.removeChild(e.lastChild) }, parse: function (e) { let t = { obj: [], watchers: [], funcs: [], sys: [] }; return h(t.obj, e, 0, t.watchers, t.funcs, t.sys), t }, register: function (e) { for (let t = 0; t < e.args.watchers.length; t++) { let n = e.args.watchers[t]; if (("l" === n.flow || "p" === n.flow) && void 0 !== e.compCtx) { let t = e.compCtx.comp.length; for (; t--;)n.path.unshift(e.compCtx.comp[t]) } n.watch && v.watcher(n.path, e) } }, prepare: function (e) { if (void 0 !== e.args) { for (let t = 0; t < e.args.sys.length; t++) { let n = e.args.sys[t]; switch (n.name) { case "$watcher": n.obj[n.pos] = e; break; case "$root": n.obj[n.pos] = e.ctx.el; case "$this": n.obj[n.pos] = e.el; break; case "$value": n.obj[n.pos] = e.el.value; break; case "$text": n.obj[n.pos] = e.el.textContent; break; default: n.obj[n.pos] = void 0 !== e.ctx[n.name] ? e.ctx[n.name] : e.el.dataflow.context[n.name] } } for (let t = 0; t < e.args.watchers.length; t++) { let n = e.args.watchers[t]; "p" !== n.flow ? n.obj[n.pos] = v.get(n.path, e) : n.obj[n.pos] = n.path } for (let t = 0; t < e.args.funcs.length; t++) { let n, l = e.args.funcs[t]; n = void 0 !== e.compCtx && void 0 !== e.compCtx.funcs && void 0 !== e.compCtx.funcs[l.name] ? e.compCtx.funcs[l.name] : void 0 !== e.ctx && void 0 !== e.ctx.funcs && void 0 !== e.ctx.funcs[l.name] ? e.ctx.funcs[l.name] : this.func(l.name), l.obj[l.pos] = n.apply(e, l.args) } return e.args.obj } }, setup: function (e) { void 0 === e.dataflow && (e.dataflow = {}), void 0 === e.dataflow.watchers && (e.dataflow.watchers = []), void 0 === e.dataflow.context && (e.dataflow.context = {}), void 0 === e.dataflow.events && (e.dataflow.events = []), void 0 === e.dataflow.directives && (e.dataflow.directives = {}) }, transfer: function (e, t) { void 0 === t && (t = {}), void 0 !== e.compCtx && (t.compCtx = e.compCtx); for (let n in e.el.dataflow.context) t.el.dataflow.context[n] = e.el.dataflow.context[n]; return t }, assign: function () { return Object.assign({}, v.get(r(arguments))) }, push: function (e, t) { let n = v.get(e); n.push(t), v.set(e, n) } }; v.func("set", (function () { let e = r(arguments); 2 === e.length && e.push(this), v.set.apply(df, e) })), v.func("setToggle", (function (e) { let t = v.get(e); t = !t, v.set(e, t) })), v.func("stringify", (function (e) { return JSON.stringify(e) })), v.func("concat", (function () { return r(arguments).join("") })), v.func("not", (function (e) { return !e })), v.func("empty", (function (e) { return !e })), v.func("eq", (function (e, t) { return e === t })), v.func("ne", (function (e, t) { return e !== t })), v.func("int", (function (e) { return parseInt(e) })), v.func("float", (function (e) { return parseFloat(e) })), v.func("or", (function () { let e = r(arguments); return e[0] ? e[1] : e[2] })), v.func("if", (function () { let e = r(arguments); if (e.shift()) { let t = e.shift(); return void 0 !== this.ctx.funcs && void 0 !== this.ctx.funcs[t] ? this.ctx.funcs[t].apply(this, e) : v.func(t).apply(this, e) } })), v.func("ifr", (function () { let e = r(arguments); if (e.shift()) return e })), v.func("toggleClassTrue", (function (e, t) { t ? this.el.classList.add(e) : this.el.classList.remove(e) })), v.func("toggleClassFalse", (function (e, t) { t ? this.el.classList.remove(e) : this.el.classList.add(e) })), v.func("removeClassTrue", (function (e, t) { t && this.el.classList.remove(e) })), v.func("addClassTrue", (function (e, t) { t && this.el.classList.add(e) })), v.func("class", (function (e, t, n, l) { switch (e) { case "toggle": if (n) return void this.el.classList.add(t); this.el.classList.remove(t); break; case "switch": if (n) return this.el.classList.remove(t), void this.el.classList.add(l); this.el.classList.remove(l), this.el.classList.add(t) } })), v.func("classTrue", (function (e, t) { t && this.el.classList.add(e) })), v.func("toggleClassIfTrue", (function (e, t) { t && (this.el.classList.contains(e) ? this.el.classList.remove(e) : this.el.classList.add(e)) })), v.func("classFalse", (function () { let e = r(arguments); e[0] = !e[0], v.func("classTrue").apply(this, e) })), v.func("show", (function (e) { e ? this.el.classList.remove("df-hide") : this.el.classList.add("df-hide") })), v.func("hide", (function (e) { e ? this.el.classList.add("df-hide") : this.el.classList.remove("df-hide") })), v.directive("noop", (function () { })), v.directive("text", (function (e, t) { this.el.textContent = "" !== e ? e : t })), v.directive("text", (function (e, t) { this.el.textContent = "" !== e ? e : t })), v.directive("value", (function (e, t) { this.el.value = e || t })), v.directive("focus", (function (e) { e && this.el.focus() })), v.directive("attr", (function (e, t, n) { e && this.el.setAttribute(t, n) })), v.directive("rowspan", (function (e, t) { e ? this.el.setAttribute("rowspan", t) : (v.remove(this.el, { container: !0, deep: !0 }), this.el.parentElement.removeChild(this.el)) })), v.directive("component", (function (e, t) { void 0 === t && (t = {}), t.el = this.el, v.transfer(this, t), v.inject(e, t) })), v.directive("range", (function (e, t) { let n; void 0 === t && (t = {}), "string" == typeof t && (t = { key: t }), t.last && (n = this.el.lastElementChild, n.parentNode.removeChild(n)); let l = this.el.dataflow.directives; void 0 === l.range && (l.range = {}); let i = l.range; if (void 0 === i.el) { let e = this.el.firstElementChild; i.el = e.cloneNode(!0); let t = this.el.querySelectorAll("*"); for (let e = 0; e < t.length; e++) { let n = t[e]; v.setup(n), n.dataflow.omit = !0 } this.el.removeChild(e), i.el.classList.remove("df-hide") } let s, o = !1; switch (void 0 !== t && void 0 !== t.data && (o = !0), void 0 !== t && void 0 !== t.key && (s = t.key), v.remove(this.el, { data: o, deep: !0 }), void 0 === i.fn && (i.fn = function (e, t, n) { let l = i.el.cloneNode(!0); v.setup(l); let s = {}; s.el = l, e.el.dataflow.context[t] = n; let o = s.el.querySelectorAll("*"); for (let t = 0; t < o.length; t++) { let n = o[t]; v.setup(n); for (let t in e.el.dataflow.context) n.dataflow.context[t] = e.el.dataflow.context[t] } s.container = !0, v.transfer(e, s), v.exec(s), e.el.insertAdjacentElement("beforeend", l) }), !0) { case Array.isArray(e): for (let t = 0; t < e.length; t++)i.fn(this, s || "$index", t); break; case "object" == typeof e: for (let t in e) i.fn(this, s || "$key", t) }t.last && this.el.insertAdjacentElement("beforeend", n) })), v.directive("hide", v.func("hide")), v.directive("show", v.func("show")), v.directive("class", v.func("class")), v.directive("class.true", v.func("classTrue")), v.directive("class.false", v.func("classFalse")), v.directive("class.else", (function (e, t, n) { e ? (this.el.classList.remove(n), this.el.classList.add(t)) : (this.el.classList.remove(t), this.el.classList.add(n)) })), v.directive("class.toggle.true", v.func("toggleClassTrue")), v.directive("class.toggle.false", v.func("toggleClassFalse")), v.directive("class.remove.true", v.func("removeClassTrue")), v.directive("class.add.true", v.func("addClassTrue")), v.directive("class.toggle.if.true", v.func("toggleClassIfTrue")), v.directive("if", v.func("if")), v.directive("context", (function (e) { let t = this.el.dataflow.directives; void 0 === t.context && (t.context = {}); let n = t.context; if (!n.init) { n.init = !0, n.once = !1; for (let t in e) this.el.dataflow.context[t] = e[t]; let t = this.el.querySelectorAll("*"); for (let n = 0; n < t.length; n++) { let l = t[n]; for (let t in e) l.dataflow.context[t] = e[t] } return } if (n.once) return void (n.once = !1); if (n.once = !0, function (e, t) { for (let n in e) { if (void 0 === t[n]) return !1; if (e[n] !== t[n]) return !1 } return !0 }(e, this.el.dataflow.context)) return void (n.once = !1); for (let t in e) this.el.dataflow.context[t] = e[t]; let l = this.el.querySelectorAll("*"); for (let t = 0; t < l.length; t++) { let n = l[t]; for (let t in e) n.dataflow.context[t] = e[t] } v.clean(this.el, { container: !0, deep: !0 }); let i = v.transfer(this, { el: this.el }); i.container = !0, v.exec(i), n.once = !1 })), v.directive("log", (function () { console.log(arguments) })), document.addEventListener("DOMContentLoaded", (function () { v.set("pathfinder.ready", !0), console.log("pf ready"), v.w = l, v.d = n, console.log(l), console.log(n) })), this.pf = v }).call(this);